//
// EnemyCarView.swift
// Generated by Core Animator version 1.0 on 24/02/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class EnemyCarView : UIView {
    
    var viewsByName: [String : UIView]!
    
    // - MARK: Life Cycle
    
    required init() {
        super.init(frame: CGRect(x: 0, y: 0, width: 81, height: 125))
        self.setupHierarchy()
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.setupHierarchy()
    }
    
    required init(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)!
        self.setupHierarchy()
    }
    
    // - MARK: Scaling
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        if let scalingView = self.viewsByName["__scaling__"] {
            var xScale = self.bounds.size.width / scalingView.bounds.size.width
            var yScale = self.bounds.size.height / scalingView.bounds.size.height
            switch contentMode {
            case .scaleToFill:
                break
            case .scaleAspectFill:
                let scale = max(xScale, yScale)
                xScale = scale
                yScale = scale
            default:
                let scale = min(xScale, yScale)
                xScale = scale
                yScale = scale
            }
            scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
            scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
        }
    }
    
    // - MARK: Setup
    
    func setupHierarchy() {
        var viewsByName: [String : UIView] = [:]
        let bundle = Bundle(for:type(of: self))
        let __scaling__ = UIView()
        __scaling__.bounds = CGRect(x:0, y:0, width:81, height:125)
        __scaling__.center = CGPoint(x:40.9, y:62.8)
        self.addSubview(__scaling__)
        viewsByName["__scaling__"] = __scaling__
        
        let enemy = UIView()
        enemy.bounds = CGRect(x:0, y:0, width:81.0, height:124.0)
        enemy.layer.position = CGPoint(x:40.500, y:62.000)
        __scaling__.addSubview(enemy)
        viewsByName["enemy"] = enemy
        
        let cloud = UIImageView()
        cloud.bounds = CGRect(x:0, y:0, width:57.0, height:31.0)
        var imgWölkchen: UIImage!
        if let imagePath = bundle.path(forResource: "wölkchen.png", ofType:nil) {
            imgWölkchen = UIImage(contentsOfFile:imagePath)
        }
        cloud.image = imgWölkchen
        cloud.contentMode = .center;
        cloud.layer.position = CGPoint(x:53.454, y:16.524)
        cloud.transform = CGAffineTransform(rotationAngle: 1.51).scaledBy(x: 0.40, y: 0.40)
        enemy.addSubview(cloud)
        viewsByName["cloud"] = cloud
        
        let enemyCar = UIImageView()
        enemyCar.bounds = CGRect(x:0, y:0, width:81.0, height:124.0)
        var imgCar4: UIImage!
        if let imagePath = bundle.path(forResource: "car4.png", ofType:nil) {
            imgCar4 = UIImage(contentsOfFile:imagePath)
        }
        enemyCar.image = imgCar4
        enemyCar.contentMode = .center;
        enemyCar.layer.position = CGPoint(x:40.500, y:62.000)
        enemyCar.transform = CGAffineTransform(rotationAngle: 3.142)
        enemy.addSubview(enemyCar)
        viewsByName["enemyCar"] = enemyCar
        
        self.viewsByName = viewsByName
    }
    
    // - MARK: polute
    
    func addPoluteAnimation() {
        addPoluteAnimationWithBeginTime(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
    }
    
    func addPoluteAnimation(removedOnCompletion: Bool) {
        addPoluteAnimationWithBeginTime(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
    }
    
    func addPoluteAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        
        let cloudOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
        cloudOpacityAnimation.duration = 0.750
        cloudOpacityAnimation.values = [0.000 as Float, 0.998 as Float, 0.000 as Float]
        cloudOpacityAnimation.keyTimes = [0.000, 0.333, 1.000]
        cloudOpacityAnimation.timingFunctions = [linearTiming, linearTiming]
        cloudOpacityAnimation.repeatCount = HUGE
        cloudOpacityAnimation.beginTime = beginTime
        cloudOpacityAnimation.fillMode = fillMode
        cloudOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["cloud"]?.layer.add(cloudOpacityAnimation, forKey:"polute_Opacity")
        
        let cloudScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
        cloudScaleXAnimation.duration = 0.750
        cloudScaleXAnimation.values = [0.405 as Float, 0.405 as Float, 0.675 as Float]
        cloudScaleXAnimation.keyTimes = [0.000, 0.333, 1.000]
        cloudScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
        cloudScaleXAnimation.repeatCount = HUGE
        cloudScaleXAnimation.beginTime = beginTime
        cloudScaleXAnimation.fillMode = fillMode
        cloudScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["cloud"]?.layer.add(cloudScaleXAnimation, forKey:"polute_ScaleX")
        
        let cloudScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
        cloudScaleYAnimation.duration = 0.750
        cloudScaleYAnimation.values = [0.405 as Float, 0.405 as Float, 0.675 as Float]
        cloudScaleYAnimation.keyTimes = [0.000, 0.333, 1.000]
        cloudScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
        cloudScaleYAnimation.repeatCount = HUGE
        cloudScaleYAnimation.beginTime = beginTime
        cloudScaleYAnimation.fillMode = fillMode
        cloudScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["cloud"]?.layer.add(cloudScaleYAnimation, forKey:"polute_ScaleY")
        
        let cloudTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        cloudTranslationXAnimation.duration = 0.750
        cloudTranslationXAnimation.values = [0.000 as Float, -2.690 as Float, -5.951 as Float, -11.460 as Float]
        cloudTranslationXAnimation.keyTimes = [0.000, 0.333, 0.500, 1.000]
        cloudTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
        cloudTranslationXAnimation.repeatCount = HUGE
        cloudTranslationXAnimation.beginTime = beginTime
        cloudTranslationXAnimation.fillMode = fillMode
        cloudTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["cloud"]?.layer.add(cloudTranslationXAnimation, forKey:"polute_TranslationX")
        
        let cloudTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        cloudTranslationYAnimation.duration = 0.750
        cloudTranslationYAnimation.values = [0.000 as Float, -32.641 as Float, -45.833 as Float, -62.777 as Float]
        cloudTranslationYAnimation.keyTimes = [0.000, 0.333, 0.500, 1.000]
        cloudTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
        cloudTranslationYAnimation.repeatCount = HUGE
        cloudTranslationYAnimation.beginTime = beginTime
        cloudTranslationYAnimation.fillMode = fillMode
        cloudTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
        self.viewsByName["cloud"]?.layer.add(cloudTranslationYAnimation, forKey:"polute_TranslationY")
    }
    
    func removePoluteAnimation() {
        self.viewsByName["cloud"]?.layer.removeAnimation(forKey: "polute_Opacity")
        self.viewsByName["cloud"]?.layer.removeAnimation(forKey: "polute_ScaleX")
        self.viewsByName["cloud"]?.layer.removeAnimation(forKey: "polute_ScaleY")
        self.viewsByName["cloud"]?.layer.removeAnimation(forKey: "polute_TranslationX")
        self.viewsByName["cloud"]?.layer.removeAnimation(forKey: "polute_TranslationY")
    }
    
    func removeAllAnimations() {
        for subview in viewsByName.values {
            subview.layer.removeAllAnimations()
        }
    }
}
